name: Build and Release Firefox Extension

on:
  push:
    tags:
      - '*'
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install web-ext
      run: npm install --global web-ext

    # Build unsigned ZIP for main branch pushes
    - name: Build unsigned artifact (main branch)
      if: github.ref == 'refs/heads/main'
      run: web-ext build --overwrite-dest --artifacts-dir ./artifacts

    # Sign & Upload XPI for tag pushes
    - name: Sign and Publish artifact (tags)
      if: github.ref_type == 'tag'
      env:
        FIREFOX_ISSUER: ${{ secrets.FIREFOX_ISSUER }}
        FIREFOX_SECRET: ${{ secrets.FIREFOX_SECRET }}
      run: web-ext sign --channel unlisted --artifacts-dir ./artifacts --api-key $FIREFOX_ISSUER --api-secret $FIREFOX_SECRET

    - name: Delete existing release tagged with this commit (if any)
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release delete ${{ github.ref_name }} -y || true

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}
        draft: false
        prerelease: false

    # Find the correct asset (XPI for tags, ZIP for main)
    - name: Find Release Asset
      id: find_asset
      run: |
        ASSET_PATH=$(find ./artifacts -maxdepth 1 \( -name "*.xpi" -o -name "*.zip" \) -print -quit)
        echo "ASSET_PATH=${ASSET_PATH}" >> $GITHUB_OUTPUT
        echo "ASSET_NAME=$(basename ${ASSET_PATH})" >> $GITHUB_OUTPUT

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_asset.outputs.ASSET_PATH }}
        asset_name: ${{ steps.find_asset.outputs.ASSET_NAME }}
        asset_content_type: application/zip
